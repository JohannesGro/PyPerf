#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

import unittest
import subprocess
import os
from nose.tools import eq_
from .utils import coverage_opts

"""
This tests whether the data generated by 'runner' is compatible
with 'upload' and 'render'.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id$"


class Test_Integration(unittest.TestCase):
    here = os.path.abspath(os.path.dirname(__file__))
    REPORTFILE = os.path.join(here, "report_tmp.json")
    RENDERFILE = "render.html"
    BENCH = os.path.normpath(os.path.join(here, "..", "bench.py"))

    def setUp(self):
        cmdline = [
            "python", self.BENCH, "runner", "--suite",
            os.path.join(self.here, "dummy.json"),
            "-o", self.REPORTFILE
        ]
        subprocess.check_call(cmdline, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def tearDown(self):
        if os.path.exists(self.REPORTFILE):
            os.remove(self.REPORTFILE)
        if os.path.exists(self.RENDERFILE):
            os.remove(self.RENDERFILE)

    def test_upload(self):
        # assumes a running influx on con-wen
        # and an 'sdperf' database inside of it
        # TODO: assume less or automate the setup
        rc = subprocess.check_call(["python"] + coverage_opts() + [
            self.BENCH, "upload", "--filename=%s" % self.REPORTFILE,
            "--influxdburl=http://con-wen.contact.de:8086", "--database=sdperf"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        eq_(rc, 0)

    def test_render(self):
        cmdline = ["python"] + coverage_opts() + [
            self.BENCH, "render", self.REPORTFILE, "-o", self.RENDERFILE
        ]
        rc = subprocess.check_call(cmdline, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        eq_(rc, 0)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
